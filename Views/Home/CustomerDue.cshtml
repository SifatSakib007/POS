@model POS.Models.Customer
@{
    ViewBag.Title = "Customer Due Payment";
}

<div class="font-[sans-serif] bg-white">
    <div class="max-w-4xl w-full h-max rounded-md px-4 py-8 mx-auto">
        <h2 class="text-2xl font-semibold mb-4">Customer Due Payment</h2>

        <form asp-action="CustomerDue" method="post" class="mt-8">
            @Html.AntiForgeryToken()

            <!-- Customer Dropdown -->
            <div class="relative flex items-center sm:col-span-2 mt-4">
                <label asp-for="Id" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">কাস্টমার সিলেক্ট করুন</label>
                <select asp-for="Id" class="px-4 py-6 bg-gray-100 text-gray-800 w-full text-sm rounded-md" onchange="fetchCustomerDetails(this.value)">
                    <option value="">কাস্টমার সিলেক্ট করুন</option>
                    @foreach (var customer in (SelectList)ViewBag.CustomerList)
                    {
                        <option value="@customer.Value">@customer.Text</option>
                    }
                </select>
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>

            <!-- Phone Number (readonly) -->
            <div class="relative flex items-center sm:col-span-2 mt-4">
                <label asp-for="PhoneNo" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">ফোন নাম্বার</label>
                <input asp-for="PhoneNo" readonly placeholder="ফোন নাম্বার লিখুন" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span asp-validation-for="PhoneNo" class="text-danger"></span>
            </div>
            
            <!-- Due Amount (readonly) -->
            <div class="relative flex items-center sm:col-span-2 mt-4">
                <label asp-for="Due" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বর্তমান বাকি</label>
                <input asp-for="Due" readonly placeholder="বর্তমান বাকি" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span asp-validation-for="Due" class="text-danger"></span>
            </div>
           
     

            <!-- Amount to Pay (DueClose) -->
            <div class="relative flex items-center sm:col-span-2 mt-4">
                <label asp-for="DueClose" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বর্তমান পরিশোধ</label>
                <input asp-for="DueClose" placeholder="বর্তমান পরিশোধ" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span asp-validation-for="DueClose" class="text-danger"></span>
            </div>


            <!-- Remaining Due (calculated) -->

            <div class="relative flex items-center sm:col-span-2 mt-4">
                <label  class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বাকি টাকা</label>
                <input placeholder="বাকি টাকা" readonly class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span  class="text-danger"></span>
            </div>


            <!-- Buttons -->
            <div class="flex gap-4 max-md:flex-col mt-8">
                <button type="submit" class="rounded-md px-6 py-3 w-full text-sm tracking-wide bg-blue-600 hover:bg-blue-700 text-white">
                    Update Due
                </button>
                <a href="@Url.Action("CustomerDue", "Home")" class="rounded-md px-6 py-3 w-full text-sm tracking-wide bg-transparent hover:bg-gray-100 border border-gray-300 text-gray-800 text-center">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
@*     @await Html.PartialAsync("_ValidationScriptsPartial") *@

    <script>
        // Fetch customer details via AJAX
        function fetchCustomerDetails(Id) {
            if (!Id) {
                // Clear all fields if no customer is selected
                document.getElementById('PhoneNo').value = '';
                document.getElementById('Due').value = '';
                document.getElementById('DueClose').value = '';
                document.getElementById('RemainingDue').value = '';
                return;
            }

            fetch(`/Home/GetCustomerDetailsForDueCustomer?id=${Id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('PhoneNo').value = data.phoneNo || '';
                        document.getElementById('Due').value = data.due || 0;
                    } else {
                        alert(data.message);
                    }
                });
        }

        // Calculate remaining due based on entered DueClose amount
        function calculateRemainingDue() {
            const due = parseFloat(document.getElementById('Due').value) || 0;
            const dueClose = parseFloat(document.getElementById('DueClose').value) || 0;
            const remainingDue = due - dueClose;
            document.getElementById('RemainingDue').value = remainingDue >= 0 ? remainingDue.toFixed(2) : due;
        }
    </script>
}
