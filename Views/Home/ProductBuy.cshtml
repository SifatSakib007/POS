@model POS.Models.ProductClientViewModel

<div class="p-4">
    @* পণ্য বিক্রয় নিবন্ধন *@
    <p class="text-center text-xl mb-4">নতুন পণ্য এবং ক্লায়েন্ট যোগ করুন</p>

    <div class="font-[sans-serif] bg-white">
        <div class="max-w-4xl w-full h-max rounded-md px-4 py-8 mx-auto">
            <form id="" class="mt-8">
                
                <!-- Product Section -->
                <div class="flex flex-col md:grid md:grid-cols-2 gap-4">
                    <!-- পণ্য সিলেক্ট করুন -->
                    <div class="relative mb-4">
                        <label for="productName" class="block text-sm text-gray-600">পণ্য সিলেক্ট করুন</label>
                        <input id="productName"
                               class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                               placeholder="পণ্যের নাম লিখুন"
                               onfocus="fetchAllProducts()"
                               oninput="searchProducts(this.value)"
                               autocomplete="off" />

                        <!-- Suggestions List -->
                        <ul id="suggestions" class="absolute z-10 bg-white border border-gray-300 mt-1 hidden w-full"></ul>

                        <input type="hidden" id="SelectedProductId" name="SelectedProductId" value="" />
                       @*  <input type="hidden" id="previousBuyPrice" name="previousBuyPrice" value="" />
                        <span id="error-message" class="text-red-500 text-sm"></span> *@
                    </div>

                    <!-- Previous Buy Price -->
                    <div class="relative flex items-center mt-4">
                        <label for="previousBuyPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পূর্ববর্তী ক্রয় মূল্য</label>
                        <input id="previousBuyPrice" type="number" placeholder="পূর্ববর্তী ক্রয় মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- Buy Price -->
                    <div class="relative flex items-center mt-4">
                        <label for="buyPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">ক্রয় মূল্য</label>
                        <input id="buyPrice" type="number" placeholder="ক্রয় মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- স্টক (readonly) -->
                    <div class="relative flex items-center mt-4">
                        <label for="stock" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পরিমাণ</label>
                        <input id="stock" placeholder="স্টক" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>
                    <!-- Quantity -->
                    <div class="relative flex items-center mt-4">
                        <label for="previousStock" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পূর্বের র্পরিমাণ</label>
                        <input id="previousStock" placeholder="পূর্বের র্পরিমাণ" readonly class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- পরিমাণ  -->
                    <div class="relative flex items-center  mt-4">
                        <label class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পণ্যের একক</label>
                        <input type="text" id="quantity" placeholder="পণ্যের একক" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- মোট মূল্য -->
                    <div class="relative flex items-center mt-4">
                        <label for="totalPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">মোট মূল্য</label>
                        <input id="totalPrice" readonly placeholder="মোট মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <!-- পণ্য যুক্ত করার বাটন -->
                <button type="button" id="addProductBtn" class="rounded-md px-6 py-3 w-full text-sm tracking-wide bg-blue-600 hover:bg-blue-700 text-white mt-4">যুক্ত করুন</button>

                <!-- পণ্যের টেবিল -->
                <div class="mt-8 overflow-x-auto">
                    <table id="productTable" class="min-w-full bg-white border border-gray-300">
                        <thead>
                            <tr>
                                <th class="px-4 py-2">পণ্যের নাম</th>
                                <th class="px-4 py-2">পূর্ববর্তী ক্রয় মূল্য</th>
                                <th class="px-4 py-2">ক্রয় মূল্য</th>
                                <th class="px-4 py-2">পরিমাণ</th>
                                <th class="px-4 py-2">একক</th>
                                <th class="px-4 py-2">মোট মূল্য</th>
                                <th class="px-4 py-2">অ্যাকশন</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- এখানে ডায়নামিকভাবে পণ্য যুক্ত হবে -->
                        </tbody>
                    </table>
                </div>
            </form>
        </div>
    </div>

    @* responsive form start *@
    <form class="font-[sans-serif] m-6 max-w-4xl mx-auto">

        <div class="grid sm:grid-cols-2 gap-10">

            <div class="relative flex items-center  mt-4">
                <label for="totalTotalPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    মোট টাকা
                </label>
                <input readonly id="totalTotalPrice" type="text" placeholder="মোট টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>

            <!-- Client Selection Section -->
            <div class="relative flex items-center mb-4">
                <label for="clientNameInput" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    ক্লায়েন্ট নির্বাচন করুন
                </label>
                <input type="text" id="clientNameInput" placeholder="নাম লিখুন"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none"
                       onfocus="fetchAllClients()"
                       oninput="searchClients(this.value)"
                       autocomplete="off" />
                <ul id="clientSuggestions" class="absolute z-10 bg-white border border-gray-300 mt-1 hidden w-full top-16"></ul>
                <span id="client-error-message" class="text-red-500 text-sm"></span>
            </div>

            <div class="relative flex items-center mt-4">
                <label for="clientAddress" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    ক্লায়েন্টের ঠিকানা
                </label>
                <input id="clientAddress" type="text" placeholder="ক্লায়েন্টের ঠিকানা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
            </div>

            <div class="relative flex items-center mt-4">
                <label for="clientPhoneNo" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    ফোন নম্বর
                </label>
                <input id="clientPhoneNo" type="number" placeholder="ফোন নম্বর লিখুন"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
            </div>

            <div class="relative flex items-center mt-4">
                <label for="clientDebt" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    সাবেক টাকা
                </label>
                <input id="clientDebt" type="number" placeholder="সাবেক টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
            </div>

            <div class="relative flex items-center ">
                <label class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">সর্বমোট টাকা</label>
                <input id="grandTotal" type="number" placeholder="সর্বমোট টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <label for="paidAmountInput" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পরিশোধক্রিত টাকা</label>
                <input id="paidAmountInput" type="number" placeholder="পরিশোধক্রিত টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <label for="remainingAmountInput" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বাকি টাকা</label>
                <input id="remainingAmountInput" type="number" placeholder="বাকি টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" readonly />
            </div>

        </div>

        <button type="button" id="submitButton"
                class="mt-10 px-6 py-2.5 w-full text-sm bg-[#007bff] text-white hover:bg-[#006bff] rounded-sm">
            পণ্য এবং ক্লায়েন্ট যোগ করুন
        </button>
    </form>
    @* responsive form end *@


</div>
@section Scripts {
    @* @await Html.PartialAsync("_ValidationScriptsPartial") *@
    <script>
        // start
              let allProducts = []; // Store all products once

        // Fetch all products when the input field is focused
        function fetchAllProducts() {
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = ''; // Clear previous results
            suggestionsBox.classList.remove('hidden');

            if (allProducts.length === 0) {
                // Fetch products only once
                fetch('/Home/GetAllProducts') // Adjust URL to fetch all products once
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.products.length > 0) {
                            allProducts = data.products; // Store products locally
                            displaySuggestions(allProducts); // Show all products initially
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching products:", error);
                    });
            } else {
                displaySuggestions(allProducts); // Show cached products
            }
        }

        // Function to filter products based on user input (frontend filtering)
        function searchProducts(searchTerm) {
            const filteredProducts = allProducts.filter(product =>
                product.productName.toLowerCase().includes(searchTerm.toLowerCase())
            );
            displaySuggestions(filteredProducts); // Display filtered suggestions
        }

        // Function to display suggestions in the dropdown
        function displaySuggestions(products) {
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = ''; // Clear previous results

            if (products.length > 0) {
                suggestionsBox.classList.remove('hidden');
                products.forEach(product => {
                    const li = document.createElement('li');
                    li.textContent = product.productName;
                    li.classList.add('cursor-pointer', 'p-2', 'hover:bg-gray-200');
                    li.onclick = () => selectProduct(product);
                    suggestionsBox.appendChild(li);
                });
            } else {
                suggestionsBox.classList.add('hidden'); // Hide dropdown if no results
            }
        }

        // Function to select a product
        function selectProduct(product) {
            document.getElementById('productName').value = product.productName;
            document.getElementById('SelectedProductId').value = product.productId;
            document.getElementById('previousBuyPrice').value = product.buyPrice;
            document.getElementById('previousBuyPrice').value = product.stock;

            document.getElementById('suggestions').classList.add('hidden'); // Hide suggestions after selection
        }

        // Close the dropdown if clicked outside
        document.addEventListener('click', function (event) {
            const suggestionsBox = document.getElementById('suggestions');
            const productInput = document.getElementById('productName');
            if (!productInput.contains(event.target) && !suggestionsBox.contains(event.target)) {
                suggestionsBox.classList.add('hidden');
            }
        });

        // Function to calculate total price
        function calculateTotalPrice() {
            const buyPrice = parseFloat(document.getElementById('buyPrice').value) || 0;
            const stock = parseFloat(document.getElementById('stock').value) || 0;
            const totalPrice = buyPrice * stock;
            document.getElementById('totalPrice').value = totalPrice.toFixed(2);
        }

        // Add event listeners for buyPrice and stock inputs
        document.getElementById('buyPrice').addEventListener('input', calculateTotalPrice);
        document.getElementById('stock').addEventListener('input', calculateTotalPrice);

        // Function to add product
        function addProduct() {
            const productName = document.getElementById('productName').value;
            const previousBuyPrice = parseFloat(document.getElementById('previousBuyPrice').value) || null;
            const buyPrice = parseFloat(document.getElementById('buyPrice').value) || 0;
            const stock = parseFloat(document.getElementById('stock').value) || 0;
            const totalPrice = buyPrice * stock;

            if (!productName || stock <= 0) {
                alert('পণ্য নাম এবং পরিমাণ ফিল্ড পূর্ণ করুন');
                return;
            }

            addProductToSuggestions(productName);

            const finalPreviousBuyPrice = previousBuyPrice !== null ? previousBuyPrice : buyPrice;

            const productTableBody = document.getElementById('productTable').querySelector('tbody');
            const newRow = productTableBody.insertRow();
            newRow.innerHTML = `
                    <td class="px-4 py-2">${productName}</td>
                    <td class="px-4 py-2">${finalPreviousBuyPrice.toFixed(2)}</td>
                    <td class="px-4 py-2">${buyPrice.toFixed(2)}</td>
                    <td class="px-4 py-2">${stock}</td>
                    <td class="px-4 py-2">${totalPrice.toFixed(2)}</td>
                    <td class="px-4 py-2">
                        <button class="text-red-500" onclick="removeProduct(this)">মুছুন</button>
                        <button class="text-blue-500" onclick="updateProduct(this)">আপডেট</button>
                    </td>
                `;

            clearInputFields();
            updateTotalPrice(); // Update total price after adding product
        }

        // Function to update total price
        function updateTotalPrice() {
            const productTableBody = document.getElementById('productTable').querySelector('tbody');
            const rows = productTableBody.getElementsByTagName('tr');
            let total = 0;

            for (let row of rows) {
                const priceCell = row.cells[4]; // Total price cell (5th column)
                const price = parseFloat(priceCell.textContent) || 0;
                total += price;
            }

            // Display total price in the readonly input field
            document.getElementById('totalTotalPrice').value = total.toFixed(2);

            // Update the grand total including client debt
            updateGrandTotal();
        }

        // Function to add the product to the suggestions
        function addProductToSuggestions(productName) {
            const suggestions = document.getElementById('suggestions');
            const suggestionItem = document.createElement('li');
            suggestionItem.textContent = productName;
            suggestionItem.classList.add('px-4', 'py-2', 'cursor-pointer');
            suggestionItem.onclick = () => {
                document.getElementById('productName').value = productName;
                suggestions.innerHTML = '';
            };
            suggestions.appendChild(suggestionItem);
        }

        // Function to clear input fields
        function clearInputFields() {
            document.getElementById('productName').value = '';
            document.getElementById('previousBuyPrice').value = '';
            document.getElementById('buyPrice').value = '';
            document.getElementById('stock').value = '';
            document.getElementById('totalPrice').value = '';
        }

        // Function to remove product from the table
        function removeProduct(button) {
            const row = button.closest('tr');
            row.remove();
            updateTotalPrice(); // Update total price after removal
        }

        // Function to update product in the table
        function updateProduct(button) {
            const row = button.closest('tr');
            const productName = row.cells[0].textContent;
            const previousBuyPrice = parseFloat(row.cells[1].textContent);
            const buyPrice = parseFloat(row.cells[2].textContent);
            const stock = parseFloat(row.cells[3].textContent);

            // Fill the input fields with the current row data for editing
            document.getElementById('productName').value = productName;
            document.getElementById('previousBuyPrice').value = previousBuyPrice;
            document.getElementById('buyPrice').value = buyPrice;
            document.getElementById('stock').value = stock;

            // Remove the current row
            row.remove();
            updateTotalPrice(); // Update total price after updating
        }

        // Add event listener to the Add Product button
        document.getElementById('addProductBtn').addEventListener('click', addProduct);

               let allClients = []; // Store clients after fetching

        // Fetch all clients when the input field is focused
        function fetchAllClients() {
            if (allClients.length === 0) {
                fetch('/Home/GetClientDetails') // Adjust URL as needed
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.clients.length > 0) {
                            allClients = data.clients; // Store fetched clients
                            displayClientSuggestions(allClients); // Show all clients initially
                        }
                    })
                    .catch(error => console.error("Error fetching clients:", error));
            } else {
                displayClientSuggestions(allClients); // Show cached clients
            }
        }

        // Filter clients based on the input value (frontend filtering)
        function searchClients(value) {
            const filteredClients = allClients.filter(client =>
                client.name.toLowerCase().includes(value.toLowerCase())
            );
            displayClientSuggestions(filteredClients); // Display filtered suggestions
        }

        // Display client suggestions in the dropdown
        function displayClientSuggestions(clients) {
            const suggestionsBox = document.getElementById('clientSuggestions');
            suggestionsBox.innerHTML = ''; // Clear previous results

            if (clients.length > 0) {
                suggestionsBox.classList.remove('hidden');
                clients.forEach(client => {
                    const li = document.createElement('li');
                    li.textContent = client.name;
                    li.classList.add('cursor-pointer', 'p-2', 'hover:bg-gray-200');
                    li.onclick = () => selectClient(client);
                    suggestionsBox.appendChild(li);
                });
            } else {
                suggestionsBox.classList.add('hidden'); // Hide dropdown if no results
            }
        }

        // Select a client and populate the fields
        function selectClient(client) {
            document.getElementById('clientNameInput').value = client.name;
            document.getElementById('clientAddress').value = client.address;
            document.getElementById('clientPhoneNo').value = client.phoneNo;
            document.getElementById('clientDebt').value = client.debt;
            document.getElementById('clientSuggestions').classList.add('hidden'); // Hide suggestions
        }

        // Hide suggestions if clicked outside
        document.addEventListener('click', function (event) {
            const suggestionsBox = document.getElementById('clientSuggestions');
            const clientInput = document.getElementById('clientNameInput');
            if (!clientInput.contains(event.target) && !suggestionsBox.contains(event.target)) {
                suggestionsBox.classList.add('hidden');
            }
        });
        // Update the grand total including client debt
        function updateGrandTotal() {
            const totalPrice = parseFloat(document.getElementById('totalTotalPrice').value) || 0;
            const clientDebt = parseFloat(document.getElementById('clientDebt').value) || 0;
            const grandTotal = totalPrice + clientDebt;

            // Update the grand total field
            document.getElementById('grandTotal').value = grandTotal.toFixed(2);

            // Directly update remaining amount with grand total initially
            document.getElementById('remainingAmountInput').value = grandTotal.toFixed(2);
        }
        // Function to update remaining amount when paidAmount is entered
        function updateRemainingAmount() {
            const grandTotal = parseFloat(document.getElementById('grandTotal').value) || 0;
            let paidAmount = parseFloat(document.getElementById('paidAmountInput').value) || 0;
            let remainingAmount = grandTotal - paidAmount;

            // Check if paidAmount exceeds grandTotal
            if (paidAmount > grandTotal) {
                alert('পরিশোধক্রিত টাকা বাকি টাকার থেকে বেশি হতে পারে না।');
                // Set paidAmount to grandTotal
                paidAmount = grandTotal;
                document.getElementById('paidAmountInput').value = paidAmount.toFixed(2);
                remainingAmount = 0;  // If paidAmount equals grandTotal, remainingAmount becomes 0
            }
            // Update the remaining amount field
            document.getElementById('remainingAmountInput').value = remainingAmount.toFixed(2);
        }

        // Event listener for paidAmount input to update remaining amount
        document.getElementById('paidAmountInput').addEventListener('input', updateRemainingAmount);

        // Call updateGrandTotal initially to set initial grandTotal and remainingAmount values
        updateGrandTotal();


        // Function to submit the form
        $(document).on('click', '#submitButton', function(){
            let products = [];
            let client = {};
            // Get all products from the table
            const productTableBody = document.getElementById('productTable').querySelector('tbody');
            const rows = productTableBody.getElementsByTagName('tr');
            for (let row of rows) {
                const productName = row.cells[0].textContent;
                const previousBuyPrice = parseFloat(row.cells[1].textContent);
                const buyPrice = parseFloat(row.cells[2].textContent);
                const stock = parseFloat(row.cells[3].textContent);
                const totalPrice = parseFloat(row.cells[4].textContent);
                products.push({
                    productName,
                    previousBuyPrice,
                    buyPrice,
                    stock,
                    totalPrice
                });
            }
            // Get client details
            client = {
                name: document.getElementById('clientNameInput').value,
                address: document.getElementById('clientAddress').value,
                phoneNo: document.getElementById('clientPhoneNo').value,
                debt: parseFloat(document.getElementById('clientDebt').value) || 0
            };
            // Get grand total and remaining amount
            const grandTotal = parseFloat(document.getElementById('grandTotal').value) || 0;
            const paidAmount = parseFloat(document.getElementById('paidAmountInput').value) || 0;
            const remainingAmount = parseFloat(document.getElementById('remainingAmountInput').value) || 0;
            // Prepare the data to send to the server
            const data = {
                products,
                client,
                grandTotal,
                paidAmount,
                remainingAmount
            };
            // Send the data to the server
            fetch('/Home/ProductBuy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('পণ্য এবং ক্লায়েন্ট সফলভাবে যোগ করা হয়েছে।');
                        location.reload(); // Reload the page after successful submission
                    } else {
                        alert('কিছু ভুল হয়েছে। দয়া করে আববার চেষ্টা করুন।');
                    }
        });
        });
    </script>
}