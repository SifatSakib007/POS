@model POS.Models.ProductClientViewModel

<div class="p-4">
    @* পণ্য বিক্রয় নিবন্ধন *@
    <p class="text-center text-xl mb-4">নতুন পণ্য এবং ক্লায়েন্ট যোগ করুন</p>

    <div class="font-[sans-serif] bg-white">
        <div class="max-w-4xl w-full h-max rounded-md px-4 py-8 mx-auto">
            <form id="" class="mt-8">
                @Html.AntiForgeryToken()
                <!-- Product Section -->

                <div class="flex flex-col md:grid md:grid-cols-2 gap-4">
                    <!-- পণ্য সিলেক্ট করুন -->
                    <div>
                        <label for="productName" class="block text-sm text-gray-600">পণ্য সিলেক্ট করুন</label>
                        <input id="productName"
                               class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                               placeholder="পণ্যের নাম লিখুন"
                               onfocus="showAllSuggestions()"
                               oninput="showSuggestions(this.value)"
                               autocomplete="off" />

                        <!-- Suggestions List -->
                        <ul id="suggestions" class="absolute z-10 bg-white border border-gray-300 mt-1 hidden w-80"></ul>

                        <span id="error-message" class="text-red-500 text-sm"></span>
                    </div>

                    <!-- Previous Buy Price -->
                    <div class="relative flex items-center mt-4">
                        <label for="previousBuyPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পূর্ববর্তী ক্রয় মূল্য</label>
                        <input id="previousBuyPrice" type="number" placeholder="পূর্ববর্তী ক্রয় মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- Buy Price -->
                    <div class="relative flex items-center mt-4">
                        <label for="buyPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">ক্রয় মূল্য</label>
                        <input id="buyPrice" type="number" placeholder="ক্রয় মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- স্টক (readonly) -->
                    <div class="relative flex items-center mt-4">
                        <label for="stock" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পরিমাণ</label>
                        <input id="stock" placeholder="স্টক" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>

                    <!-- মোট মূল্য -->
                    <div class="relative flex items-center mt-4">
                        <label for="totalPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">মোট মূল্য</label>
                        <input id="totalPrice" readonly placeholder="মোট মূল্য" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                        <span class="text-danger"></span>
                    </div>
                </div>
                <!-- পণ্য যুক্ত করার বাটন -->
                <button type="button" id="addProductBtn" class="rounded-md px-6 py-3 w-full text-sm tracking-wide bg-blue-600 hover:bg-blue-700 text-white mt-4">যুক্ত করুন</button>

                <!-- পণ্যের টেবিল -->
                <div class="mt-8 overflow-x-auto">
                    <table id="productTable" class="min-w-full bg-white border border-gray-300">
                        <thead>
                            <tr>
                                <th class="px-4 py-2">পণ্যের নাম</th>
                                <th class="px-4 py-2">পূর্ববর্তী ক্রয় মূল্য</th>
                                <th class="px-4 py-2">ক্রয় মূল্য</th>
                                <th class="px-4 py-2">পরিমাণ</th>
                                <th class="px-4 py-2">মোট মূল্য</th>
                                <th class="px-4 py-2">অ্যাকশন</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- এখানে ডায়নামিকভাবে পণ্য যুক্ত হবে -->
                        </tbody>
                    </table>
                </div>
            </form>
        </div>
    </div>


    @* {/* customer info */} *@
    <form id="" class="font-[sans-serif] max-w-4xl mx-auto">
        <div class="grid sm:grid-cols-2 gap-6">
            @* মোট মূল্য *@
            <div class="relative flex items-center  mt-4">
                <label for="totalTotalPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">
                    মোট মূল্য
                </label>
                <input readonly id="totalTotalPrice" type="text" placeholder="মোট টাকা"
                       class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>
            <div class="mb-4">
                <button id="dropdownButton" class="w-full text-left bg-gray-200 px-4 py-3 rounded-md focus:outline-none flex items-center justify-between">
                    ক্লায়েন্ট শাখা
                    <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 10l5 5 5-5H7z" />
                    </svg>
                </button>
                <div id="dropdownContent" class="hidden mt-2 bg-white shadow-md rounded-md">
                    <!-- Client Selection: New or Previous -->
                    <h3 class="text-xl font-semibold mb-4 px-4">ক্লায়েন্টের ধরণ নির্বাচন করুন</h3>
                    <div class="mb-4 px-4">
                        <label class="block text-sm text-gray-600 mb-2">ক্লায়েন্ট নির্বাচন করুন</label>
                        <div class="flex space-x-6">
                            <div class="flex items-center">
                                <input type="radio" id="newClient" name="clientType" value="new" class="w-4 h-4 text-blue-600 focus:ring-blue-500 border-gray-300" onclick="togglePreviousClientDropdown()">
                                <label for="newClient" class="ml-2 text-sm text-gray-800">নতুন ক্লায়েন্ট</label>
                            </div>
                            <div class="flex items-center">
                                <input type="radio" id="previousClient" name="clientType" value="previous" class="w-4 h-4 text-blue-600 focus:ring-blue-500 border-gray-300" onclick="togglePreviousClientDropdown()">
                                <label for="previousClient" class="ml-2 text-sm text-gray-800">পুরানো ক্লায়েন্ট</label>
                            </div>
                        </div>
                    </div>

                    <!-- Previous Client Dropdown (Initially hidden) -->
                    <div id="previousClientDiv" class="mb-4 hidden px-4">
                        <label class="block text-sm text-gray-600">পুরানো ক্লায়েন্টের নাম</label>
                        <select id="previousClient" onchange="fetchClientDetails(this.value)" class="px-4 py-3 bg-gray-100 text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600">
                            <option value="">ক্লায়েন্ট নির্বাচন করুন</option>
                            @foreach (var client in ViewBag.ClientList)
                            {
                                <option value="@client.Id">@client.Name</option>
                            }
                        </select>
                    </div>

                    <!-- Client Details Form (Will be shown dynamically based on selection) -->
                    <h3 class="text-xl font-semibold mb-4 px-4">ক্লায়েন্টের বিবরণ</h3>

                    <!-- Client Name -->
                    <div class="mb-4 px-4">
                        <label asp-for="Client.Name" class="block text-sm text-gray-600">ক্লায়েন্টের নাম</label>
                        <input asp-for="Client.Name" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" placeholder="ক্লায়েন্টের নাম লিখুন" />
                    </div>

                    <!-- Client Address -->
                    <div class="mb-4 px-4">
                        <label asp-for="Client.Address" class="block text-sm text-gray-600">ক্লায়েন্টের ঠিকানা</label>
                        <input asp-for="Client.Address" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" placeholder="ঠিকানা লিখুন" />
                    </div>

                    <!-- Client Phone Number -->
                    <div class="mb-4 px-4">
                        <label asp-for="Client.PhoneNo" class="block text-sm text-gray-600">ফোন নম্বর</label>
                        <input asp-for="Client.PhoneNo" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600" placeholder="ফোন নম্বর লিখুন" />
                    </div>            

            <!-- সর্বমোট টাকা (readonly) -->
            <div class="relative flex items-center  mt-4">
                <label class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">সর্বমোট টাকা</label>
                <input id="shorboMotTaka" type="number" placeholder="সর্বমোট টাকা" readonly class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>

            <!-- বাকি টাকা -->
            <div class="relative flex items-center  mt-4">
                <label for="debt" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বাকি টাকা</label>
                <input for="debt" readonly type="number" placeholder="বাকি টাকা" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>
            <!-- Total সর্বমোট টাকা (readonly) -->
            <div class="relative flex items-center  mt-4">
                <label class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">সর্বমোট টাকা</label>
                <input id="totalSum" type="number" placeholder="সর্বমোট টাকা" readonly class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>

            <!-- পরিশোধক্রিত টাকা  -->
            <div class="relative flex items-center  mt-4">
                <label asp-for="Product.TotalPrice" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">পরিশোধক্রিত টাকা</label>
                <input asp-for="Product.TotalPrice" type="number" placeholder="পরিশোধক্রিত টাকা" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>
                        
            <!-- Total বাকি টাকা -->
            <div class="relative flex items-center  mt-4">
                <label asp-for="Client.Debt" class="text-[13px] bg-white text-black absolute px-2 top-[-10px] left-[18px]">বাকি টাকা</label>
                <input asp-for="Client.Debt" readonly id="totaldueAmount" type="number" placeholder="বাকি টাকা" class="px-4 py-3.5 bg-white text-black w-full text-sm border-2 border-gray-100 focus:border-blue-500 rounded outline-none" />
                <span class="text-danger"></span>
            </div>

        <button type="button" id="submitButton"
                class="mt-10 px-6 py-2.5 w-full text-sm bg-[#007bff] text-white hover:bg-[#006bff] rounded-sm">
            পণ্য এবং ক্লায়েন্ট যোগ করুন
        </button>
      </div>
    </form>


</div>
@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
<script>
        let previousDueAdded = false; // Track whether previous due has been added or not
        let totalTotalPrice = 0; // Initialize totalTotalPrice
        // start
        // Existing product data
        let existingProducts = {
            "দুধ": 50,
            "চাল": 60,
            "ডাল": 70,
            "তেল": 80,
            "চিনি": 90
        };

        // Function to show all suggestions
        function showAllSuggestions() {
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = '';
            if (Object.keys(existingProducts).length > 0) {
                suggestionsBox.classList.remove('hidden');
                for (const product in existingProducts) {
                    const li = document.createElement('li');
                    li.textContent = product;
                    li.classList.add('cursor-pointer', 'p-2', 'hover:bg-gray-200');
                    li.onclick = () => selectProduct(product);
                    suggestionsBox.appendChild(li);
                }
            } else {
                suggestionsBox.classList.add('hidden');
            }
        }

        // Function to show suggestions based on input
        function showSuggestions(value) {
            const suggestionsBox = document.getElementById('suggestions');
            suggestionsBox.innerHTML = '';
            if (value.length === 0) {
                showAllSuggestions();
                return;
            }
            const filteredProducts = Object.keys(existingProducts).filter(product => product.includes(value));
            if (filteredProducts.length > 0) {
                suggestionsBox.classList.remove('hidden');
                filteredProducts.forEach(product => {
                    const li = document.createElement('li');
                    li.textContent = product;
                    li.classList.add('cursor-pointer', 'p-2', 'hover:bg-gray-200');
                    li.onclick = () => selectProduct(product);
                    suggestionsBox.appendChild(li);
                });
            } else {
                suggestionsBox.classList.add('hidden');
            }
        }

        // Function to select a product
        function selectProduct(product) {
            document.getElementById('productName').value = product;
            document.getElementById('suggestions').classList.add('hidden');
            document.getElementById('previousBuyPrice').value = existingProducts[product];
        }

        // Event listener for input on product name
        document.getElementById('productName').addEventListener('input', function () {
            const productName = this.value;
            if (!existingProducts.hasOwnProperty(productName)) {
                document.getElementById('previousBuyPrice').value = '';
            } else {
                document.getElementById('previousBuyPrice').value = existingProducts[productName];
            }
        });

        // Event listener to hide suggestions when clicking outside
        document.addEventListener('click', function (event) {
            const suggestionsBox = document.getElementById('suggestions');
            const productInput = document.getElementById('productName');
            if (!productInput.contains(event.target) && !suggestionsBox.contains(event.target)) {
                suggestionsBox.classList.add('hidden');
            }
        });

        // Function to calculate total price
        function calculateTotalPrice() {
            const buyPrice = parseFloat(document.getElementById('buyPrice').value) || 0;
            const stock = parseFloat(document.getElementById('stock').value) || 0;
            const totalPrice = buyPrice * stock;
            document.getElementById('totalPrice').value = totalPrice.toFixed(2);
        }

        // Add event listeners for buyPrice and stock inputs
        document.getElementById('buyPrice').addEventListener('input', calculateTotalPrice);
        document.getElementById('stock').addEventListener('input', calculateTotalPrice);

        // Function to add product
        function addProduct() {
            const productName = document.getElementById('productName').value;
            const previousBuyPrice = parseFloat(document.getElementById('previousBuyPrice').value) || null;
            const buyPrice = parseFloat(document.getElementById('buyPrice').value) || 0;
            const stock = parseFloat(document.getElementById('stock').value) || 0;
            const totalPrice = buyPrice * stock;

            if (!productName || stock <= 0) {
                alert('পণ্য নাম এবং পরিমাণ ফিল্ড পূর্ণ করুন');
                return;
            }

            addProductToSuggestions(productName);

            const finalPreviousBuyPrice = previousBuyPrice !== null ? previousBuyPrice : buyPrice;

            const productTableBody = document.getElementById('productTable').querySelector('tbody');
            const newRow = productTableBody.insertRow();
            newRow.innerHTML = `
                <td class="px-4 py-2">${productName}</td>
                <td class="px-4 py-2">${finalPreviousBuyPrice.toFixed(2)}</td>
                <td class="px-4 py-2">${buyPrice.toFixed(2)}</td>
                <td class="px-4 py-2">${stock}</td>
                <td class="px-4 py-2">${totalPrice.toFixed(2)}</td>
                <td class="px-4 py-2">
                    <button class="text-red-500" onclick="removeProduct(this)">মুছুন</button>
                    <button class="text-blue-500" onclick="updateProduct(this)">আপডেট</button>
                </td>
            `;

            clearInputFields();
            updateTotalPrice(); // Update total price after adding product
        }

        // Function to update total price
        function updateTotalPrice() {
            const productTableBody = document.getElementById('productTable').querySelector('tbody');
            const rows = productTableBody.getElementsByTagName('tr');
            let total = 0;

            for (let row of rows) {
                const priceCell = row.cells[4]; // Total price cell (5th column)
                const price = parseFloat(priceCell.textContent) || 0;
                total += price;
            }

            // Display total price in the readonly input field
            document.getElementById('totalTotalPrice').value = total.toFixed(2);
        }

        // Function to add the product to the suggestions
        function addProductToSuggestions(productName) {
            const suggestions = document.getElementById('suggestions');
            const suggestionItem = document.createElement('li');
            suggestionItem.textContent = productName;
            suggestionItem.classList.add('px-4', 'py-2', 'cursor-pointer');
            suggestionItem.onclick = () => {
                document.getElementById('productName').value = productName;
                suggestions.innerHTML = '';
            };
            suggestions.appendChild(suggestionItem);
        }

        // Function to clear input fields
        function clearInputFields() {
            document.getElementById('productName').value = '';
            document.getElementById('previousBuyPrice').value = '';
            document.getElementById('buyPrice').value = '';
            document.getElementById('stock').value = '';
            document.getElementById('totalPrice').value = '';
        }

        // Function to remove product from the table
        function removeProduct(button) {
            const row = button.closest('tr');
            row.remove();
            updateTotalPrice(); // Update total price after removal
        }

        // Function to update product in the table
        function updateProduct(button) {
            const row = button.closest('tr');
            const productName = row.cells[0].textContent;
            const previousBuyPrice = parseFloat(row.cells[1].textContent);
            const buyPrice = parseFloat(row.cells[2].textContent);
            const stock = parseFloat(row.cells[3].textContent);

            // Fill the input fields with the current row data for editing
            document.getElementById('productName').value = productName;
            document.getElementById('previousBuyPrice').value = previousBuyPrice;
            document.getElementById('buyPrice').value = buyPrice;
            document.getElementById('stock').value = stock;

            // Remove the current row
            row.remove();
            updateTotalPrice(); // Update total price after updating
        }

        // Add event listener to the Add Product button
        document.getElementById('addProductBtn').addEventListener('click', addProduct);

        // end



        // Function to fetch product details using AJAX
        function fetchClientDetails(clientId) {
    fetch(`/Home/GetClientDetails/${clientId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the view with the fetched client details
                document.getElementById("client_Address").value = data.data.Address;
                document.getElementById("client_PhoneNo").value = data.data.PhoneNo;
                // Assuming you have a way to calculate or retrieve the due amount
                // This example just shows a placeholder for due amount
                document.getElementById('clientDue').innerText = "Placeholder for due amount"; // Update with actual logic
                document.getElementById('clientDetails').classList.remove('hidden');

            } else {
                        console.error(data.message); // Handle error case
            }
        })
        .catch(error => {
            console.error(error); // Log any errors
        });
        }
        // Toggle dropdown visibility
        document.getElementById('dropdownButton').onclick = function(e) {
            e.preventDefault()
            const dropdownContent = document.getElementById('dropdownContent');
            dropdownContent.classList.toggle('hidden');
        }

        function togglePreviousClientDropdown() {
        
            const newClient = document.getElementById('newClient').checked;
            const previousClientDiv = document.getElementById('previousClientDiv');
            previousClientDiv.classList.toggle('hidden', newClient);
        }
        function calculateTotalPrice() {
            const buyPrice = parseFloat(document.getElementById('buyPrice').value) || 0;
            const stock = parseFloat(document.getElementById('stock').value) || 0;
            const totalPrice = buyPrice * stock;
            document.getElementById('totalPrice').value = totalPrice.toFixed(2);
            calculateDebt();
        }

        function calculateDebt() {
            const totalPrice = parseFloat(document.getElementById('totalPrice').value) || 0;
            const depositMoney = parseFloat(document.getElementById('depositMoney').value) || 0;
            const debt = totalPrice - depositMoney;
            document.getElementById('debt').value = debt.toFixed(2);
        }

        // Calculate and update total amount
        function updateTotalAmount(addShabekDue = false) {
            var totalAmount = 0;

            // Loop through the product table to sum up the total product prices
            $('#productTable tbody tr').each(function () {
                var rowTotal = parseFloat($(this).find('td:eq(4)').text()) || 0;
                totalAmount += rowTotal;
            });

            // Get the previous due (shabekDue)
            var previousDue = parseFloat($('#shabekDue').val()) || 0;

            // Add previous due to totalAmount if not already added or forcefully adding
            if (addShabekDue || !previousDueAdded) {
                totalAmount += previousDue;
                previousDueAdded = true; // Mark that previous due has been added
            }

            // Update total amounts in the form
            $('#shorboMotTaka').val(totalAmount.toFixed(2));
            $('#dueAmount').val(totalAmount.toFixed(2));

            // Update remaining due after subtracting the paid amount
            var paidAmount = parseFloat($('#paidAmount').val()) || 0;
            var remainingDue = totalAmount - paidAmount;
            $('#remainingDue').val(remainingDue.toFixed(2));

            // Update totalTotalPrice by adding only the total product prices (excluding previous due)
            totalTotalPrice = 0; // Reset totalTotalPrice before recalculating
            $('#productTable tbody tr').each(function () {
                var rowTotal = parseFloat($(this).find('td:eq(4)').text()) || 0;
                totalTotalPrice += rowTotal;
            });

            // Set totalTotalPrice only if it is greater than zero
            if (totalTotalPrice > 0) {
                $('#totalTotalPrice').val(totalTotalPrice.toFixed(2)); // Update totalTotalPrice field
            }
        }

        // Update total amount after adding a product
        $(document).on('click', '#addProductBtn', function () {
            var productName = $('#productSelect option:selected').text();
            var buyPrice = $('#buyPrice').val();
            var sellPrice = $('#sellPrice').val();
            var quantity = parseFloat($('#quantity').val());
            var stock = parseFloat($('#stock').val());
            var totalPrice = $('#totalPrice').val();

            if (quantity > stock) {
                alert("আপনি স্টকের থেকে বেশি পণ্য যোগ করতে পারবেন না।");
            } else if (quantity <= 0) {
                alert("পণ্যের পরিমাণ শূন্য বা তার চেয়ে কম হতে পারবে না।");
            } else {
                if (productName && buyPrice && sellPrice && quantity && totalPrice) {
                    var newRow = `
                                <tr>
                                    <td class="px-4 py-2">${productName}</td>
                                    <td class="px-4 py-2">${buyPrice}</td>
                                    <td class="px-4 py-2">${sellPrice}</td>
                                    <td class="px-4 py-2">${quantity}</td>
                                    <td class="px-4 py-2">${totalPrice}</td>
                                    <td class="px-4 py-2">
                                        <button type="button" class="update-btn text-blue-500">আপডেট</button>
                                        <button type="button" class="delete-btn text-red-500">মুছে দিন</button>
                                    </td>
                                </tr>`;
                    $('#productTable tbody').append(newRow);

                    var updatedStock = stock - quantity;
                    $('#stock').val(updatedStock);

                    clearProductFields(); // Clear input fields after adding

                    // Recalculate total amount
                    updateTotalAmount();
                } 
            }
        });

        // Clear input fields for products
        function clearProductFields() {
            $('#productSelect').val('');
            $('#buyPrice').val('');
            $('#stock').val('');
            $('#quantity').val('');
            $('#sellPrice').val('');
            $('#totalPrice').val('');
        }

        // Remove product from the table
        $(document).on('click', '.delete-btn', function () {
            $(this).closest('tr').remove();
            updateTotalAmount(); // Update the total amount after deletion
        });

        // Update product fields in the form when clicking the "Update" button
        $(document).on('click', '.update-btn', function () {
            var row = $(this).closest('tr');
            var productName = row.find('td:eq(0)').text();
            var buyPrice = row.find('td:eq(1)').text();
            var sellPrice = row.find('td:eq(2)').text();
            var quantity = row.find('td:eq(3)').text();
            var totalPrice = row.find('td:eq(4)').text();

            $('#productSelect option').filter(function () {
                return $(this).text() === productName;
            }).prop('selected', true);
            $('#buyPrice').val(buyPrice);
            $('#sellPrice').val(sellPrice);
            $('#quantity').val(quantity);
            $('#totalPrice').val(totalPrice);

            row.remove();
            updateTotalAmount(); // Recalculate total amount
        });

        // Update remaining due when paid amount changes
        $(document).on('input', '#paidAmount', function () {
            updateTotalAmount();
        });

        // Function to handle button click
        document.getElementById('submitButton').addEventListener('click', function () {
            var depositAmount = parseFloat(document.getElementById('depositAmount').value) || 0;
            var dueAmount = parseFloat(document.getElementById('dueAmount').value) || 0;

            // Check if depositAmount is greater than dueAmount
            if (depositAmount > dueAmount) {
                alert("আপনার দেওয়া জমার পরিমাণ বকেয়ার চেয়ে বেশি হতে পারবে না!");
            } else {
                // Update dueAmount
                var newDueAmount = dueAmount - depositAmount;
                document.getElementById('dueAmount').value = newDueAmount.toFixed(2);
            }
        });
</script>
}