@model IEnumerable<POS.Models.Buy>

<div class="container mx-auto p-6">
    <!-- Page Title -->
    <h2 class="text-3xl font-bold text-gray-800 mb-6 text-center">Product Buy List</h2>

    <!-- Date Range Filter -->
    <div class="flex justify-center items-center space-x-6 mb-6">
        <div class="w-1/3">
            <label for="dateFrom" class="block text-gray-700 text-sm font-semibold mb-2">Date From</label>
            <input id="dateFrom" type="date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
        <div class="w-1/3">
            <label for="dateTo" class="block text-gray-700 text-sm font-semibold mb-2">Date To</label>
            <input id="dateTo" type="date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>
    </div>

    <!-- Product Name Filter -->
    <div class="flex justify-center mb-6">
        <input id="productNameFilter" type="text" placeholder="Filter by Product Name"
               class="mt-2 p-2 text-gray-700 rounded w-1/2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500" />
    </div>

    <!-- Total Buy Amount -->
    <div class="bg-green-100 text-green-900 rounded-md p-4 mb-6 text-center">
        <h3 class="text-lg font-semibold">Total Buy Amount: <span id="totalBuyAmount">0</span> Taka</h3>
    </div>

    <!-- Table for displaying the buy report -->
    <div class="overflow-auto rounded-lg shadow-lg">
        <table id="buyTable" class="min-w-full bg-white">
            <thead>
                <tr class="bg-gray-800 text-white text-left">
                    <th class="px-6 py-3 text-xs font-bold uppercase tracking-wider">Product Name</th>
                    <th class="px-6 py-3 text-xs font-bold uppercase tracking-wider text-center buy-price-header cursor-pointer">
                        Buy Price <i class="fas fa-sort cursor-pointer"></i>
                    </th>
                    <th class="px-6 py-3 text-xs font-bold uppercase tracking-wider text-center stock-header cursor-pointer">
                        Stock <i class="fas fa-sort cursor-pointer"></i>
                    </th>
                    <th class="px-6 py-3 text-xs font-bold uppercase tracking-wider text-center date-header cursor-pointer">
                        Created At <i class="fas fa-sort cursor-pointer"></i>
                    </th>
                    
                    <th class="px-6 py-3 text-xs font-bold uppercase tracking-wider text-center">Action</th>
                
                </tr>
            </thead>
            <tbody class="text-gray-700">
                @foreach (var buy in Model)
                {
                    <tr class="border-b border-gray-200 hover:bg-gray-100">
                        <td class="px-6 py-4 text-sm product-name">@buy.ProductNames</td>
                        <td class="px-6 py-4 text-sm text-center buy-price">@buy.TotalSum</td>
                        <td class="px-6 py-4 text-sm text-center stock">@buy.Quantities</td>
                        <td class="px-6 py-4 text-sm text-center date">
                            @buy.CreatedAt.ToString("yyyy-MM-dd")
                        </td>
                        <td class="px-6 py-4 text-sm">
                            <a asp-controller="BuyDetails" asp-action="BuyDetails" asp-route-id="@buy.BuyId" class="text-green-600 hover:text-green-800 mr-2">
                                <i class="fas fa-info-circle"></i> Details
                            </a>
                            <a asp-controller="BuyDetails" asp-action="BuyEdit" asp-route-id="@buy.BuyId" class="text-blue-600 hover:text-blue-800 mr-2">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a asp-controller="BuyDetails" asp-action="BuyDelete" asp-route-id="@buy.BuyId" class="text-red-600 hover:text-red-800">
                                <i class="fas fa-trash-alt"></i> Delete a
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function calculateTotal() {
            let totalBuy = 0;
            document.querySelectorAll('#buyTable tbody tr').forEach(row => {
                if (row.style.display !== 'none') { // Check if the row is visible
                    const buyPrice = parseFloat(row.querySelector('.buy-price').textContent.replace(/[^0-9.-]+/g, "")) || 0;
                    totalBuy += buyPrice;
                }
            });
            document.getElementById('totalBuyAmount').textContent = totalBuy.toFixed(2);
        }

        function filterByDate() {
            const fromDate = new Date(document.getElementById('dateFrom').value);
            const toDate = new Date(document.getElementById('dateTo').value);

            document.querySelectorAll('#buyTable tbody tr').forEach(row => {
                const dateText = row.querySelector('.date').textContent;
                const productDate = new Date(dateText);

                if ((isNaN(fromDate.getTime()) || productDate >= fromDate) &&
                    (isNaN(toDate.getTime()) || productDate <= toDate)) {
                    row.style.display = ''; // Show row
                } else {
                    row.style.display = 'none'; // Hide row
                }
            });

            calculateTotal();
        }

        function filterByProductName() {
            const searchTerm = document.getElementById('productNameFilter').value.toLowerCase();

            document.querySelectorAll('#buyTable tbody tr').forEach(row => {
                const productName = row.querySelector('.product-name').textContent.toLowerCase();
                row.style.display = productName.includes(searchTerm) ? '' : 'none';
            });

            calculateTotal();
        }

        let sortOrder = -1; // Start with descending

        function sortTable(column) {
            const rows = Array.from(document.querySelectorAll('#buyTable tbody tr'));

            rows.sort((a, b) => {
                let aValue, bValue;

                if (column === 'buy-price') {
                    aValue = parseFloat(a.querySelector('.buy-price').textContent.replace(/[^0-9.-]+/g, "")) || 0;
                    bValue = parseFloat(b.querySelector('.buy-price').textContent.replace(/[^0-9.-]+/g, "")) || 0;
                } else if (column === 'stock') {
                    aValue = parseFloat(a.querySelector('.stock').textContent) || 0;
                    bValue = parseFloat(b.querySelector('.stock').textContent) || 0;
                } else if (column === 'date') {
                    aValue = new Date(a.querySelector('.date').textContent).getTime() || 0;
                    bValue = new Date(b.querySelector('.date').textContent).getTime() || 0;
                }

                return (aValue - bValue) * sortOrder;
            });

            const tbody = document.querySelector('#buyTable tbody');
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));

            sortOrder *= -1; // Toggle the sort order for next click
            calculateTotal();
        }

        // Bind events
        document.getElementById('dateFrom').addEventListener('change', filterByDate);
        document.getElementById('dateTo').addEventListener('change', filterByDate);
        document.getElementById('productNameFilter').addEventListener('input', filterByProductName);

        document.querySelector('.buy-price-header').addEventListener('click', function () { sortTable('buy-price'); });
        document.querySelector('.stock-header').addEventListener('click', function () { sortTable('stock'); });
        document.querySelector('.date-header').addEventListener('click', function () { sortTable('date'); });

        calculateTotal();
    });
</script>

