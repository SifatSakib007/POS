@model ProductCustomerViewModel

<div class="p-4">
    @* পণ্য বিক্রয় নিবন্ধন *@
    <p class="text-center text-xl mb-4">পণ্য বিক্রয় নিবন্ধন</p>

    <div class="font-[sans-serif] bg-white">
        <div class="max-w-4xl w-full h-max rounded-md px-4 py-8 mx-auto">
            <form class="mt-8">
                <!-- পণ্য ফর্ম -->
                <div class="flex flex-col md:grid md:grid-cols-2 gap-4">
                    <!-- Product Selection -->
                    <div>
                        <label asp-for="SelectedProductId" class="block text-sm text-gray-600">পণ্যের নাম</label>
                        <select id="productSelect" onchange="getProductDetails(this.value)" asp-for="SelectedProductId" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md">
                            <option value="">পণ্যের নাম</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.ProductId">@product.ProductName</option>
                            }
                        </select>
                    </div>

                    @*   <div>
                    <label asp-for="ProductName" class="block text-sm text-gray-600">পণ্যের নাম</label>
                    <input asp-for="ProductName" id="productName" readonly class="px-4 py-3 bg-gray-100 w-full text-sm rounded-md" />
                    </div> *@

                    <div>
                        <label asp-for="BuyPrice" class="block text-sm text-gray-600">ক্রয় মূল্য</label>
                        <input asp-for="BuyPrice" id="buyPrice" readonly class="px-4 py-3 bg-gray-100 w-full text-sm rounded-md" />
                    </div>

                    <div>
                        <label asp-for="Stock" class="block text-sm text-gray-600">স্টক</label>
                        <input type="number" id="stock" readonly placeholder="সংখ্যায় লিখুন" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md" />
                    </div>




                    <!-- Quantity -->
                    <div>
                        <label asp-for="Sells.Quantity" class="block text-sm text-gray-600">পরিমাণ</label>
                        <input asp-for="Sells.Quantity" id="quantity" class="px-4 py-3 bg-gray-100 w-full text-sm rounded-md" />
                    </div>

                    <!-- বিক্রয় মূল্য -->
                    <div>
                        <label asp-for="Sells.SellingPrice" class="block text-sm text-gray-600">বিক্রয় মূল্য</label>
                        <input type="number" asp-for="Sells.SellingPrice" id="sellPrice" placeholder="সংখ্যায় লিখুন" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-blue-600" />
                    </div>

                    <!-- মোট মূল্য -->
                    <div>
                        <label asp-for="TotalPrice" class="block text-sm text-gray-600">মোট মূল্য</label>
                        <input type="number" id="totalPrice" readonly placeholder="সংখ্যায় লিখুন" class="px-4 py-3 bg-gray-100 focus:bg-white text-gray-800 w-full text-sm rounded-md focus:outline-blue-600" />
                    </div>
                </div>



                <!-- পণ্য যুক্ত করার বাটন -->
                <button type="button" id="addProductBtn" class="rounded-md px-6 py-3 w-full text-sm tracking-wide bg-blue-600 hover:bg-blue-700 text-white mt-4">যুক্ত করুন</button>



                <!-- পণ্যের টেবিল -->
                <div class="mt-8 overflow-x-auto">
                    <table id="productTable" class="min-w-full bg-white border border-gray-300">
                        <thead>
                            <tr>
                                <th class="px-4 py-2">পণ্যের নাম</th>
                                <th class="px-4 py-2">ক্রয় মূল্য</th>
                                <th class="px-4 py-2">বিক্রয় মূল্য</th>
                                <th class="px-4 py-2">পরিমাণ</th>
                                <th class="px-4 py-2">মোট মূল্য</th>
                                <th class="px-4 py-2">অ্যাকশন</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- এখানে ডায়নামিকভাবে পণ্য যুক্ত হবে -->
                        </tbody>
                    </table>
                </div>
            </form>
        </div>
    </div>


    @* {/* customer info */} *@
    <form class="font-[sans-serif] max-w-4xl mx-auto">
        <div class="grid sm:grid-cols-2 gap-6">
            <div class="relative flex items-center">
                <input asp-for="TotalTotalPrice" value="@Model.TotalTotalPrice" readonly id="totalTotalPrice" type="text" placeholder="মোট টাকা"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <!-- Customer Selection -->
            <div>
                <label asp-for="SelectedCustomerId" class="block text-sm text-grey-600">BuyerName</label>
                <select id="customerSelect" asp-for="SelectedCustomerId" onchange="fetchCustomerDetails(this.value)" class="px-4 py-3 bg-grey-100 w-full text-sm rounded-md">
                    <option value="">BuyerName</option>
                    @foreach (var customer in Model.Customers)
                    {
                        <option value="@customer.Id">@customer.Name</option>
                    }
                </select>
            </div>

            <div class="relative flex items-center">
                <input asp-for="CustomerPhoneNo" id="customerPhoneNo" type="number" placeholder="ক্রেতার ফোন নাম্বার"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <div class="relative flex items-center">
                <input asp-for="CustomerAddress" id="customerAddress" type="text" placeholder="ক্রেতার ঠিকানা"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <input asp-for="ShabekDue" id="shabekDue" type="number" readonly placeholder="সাবেক টাকা"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <input id="shorboMotTaka" type="number" placeholder="সর্বমোট টাকা"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <input asp-for="Deposit" id="depositAmount" type="number" placeholder="পরিশোধক্রিত টাকা"
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>

            <div class="relative flex items-center sm:col-span-2">
                <input readonly id="dueAmount" type="number" placeholder="বাকি টাকা"
                <input readonly id="dueAmount" type="number" placeholder="বাকি টাকা"
>>>>>>>>> Temporary merge branch 2
                       class="px-2 py-3 bg-white text-black w-full text-sm border-b-2 focus:border-[#007bff] outline-none" />
            </div>
        </div>

        <button type="button" id="submitButton"
                class="mt-10 px-6 py-2.5 w-full text-sm bg-[#007bff] text-white hover:bg-[#006bff] rounded-sm">
            Submit
        </button>
    </form>


</div>

<script>
    let previousDueAdded = false; // Track whether previous due has been added or not
    let totalTotalPrice = 0; // Initialize totalTotalPrice

    // Function to fetch product details using AJAX
    function getProductDetails(productId) {
        fetch(`GetProductDetails?productId=${productId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the view with the fetched product details
                    document.getElementById("buyPrice").value = data.data.buyPrice;
                    document.getElementById("stock").value = data.data.stock;
                } else {
                    console.error(data.message); // Handle error case
                }
            })
            .catch(error => {
                console.error(error); // Log any errors
            });
    }

    // Calculate total price whenever quantity or selling price changes
    $(document).on('input', '#quantity, #sellPrice', function () {
        var quantity = parseFloat($('#quantity').val()) || 0; // Get quantity
        var sellingPrice = parseFloat($('#sellPrice').val()) || 0; // Get selling price
        var totalPrice = (quantity * sellingPrice).toFixed(2); // Calculate total price

        $('#totalPrice').val(totalPrice); // Update total price field
    });

    // Function to fetch customer details using AJAX
    function fetchCustomerDetails(customerId) {
        fetch(`GetCustomerDetails?customerId=${customerId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById("customerAddress").value = data.data.address;
                    document.getElementById("customerPhoneNo").value = data.data.phoneNo;
                    document.getElementById("shabekDue").value = data.data.due;

                    // Add previous due to total amount immediately
                    updateTotalAmount(true); // Pass true to force adding previous due
                } else {
                    console.error(data.message);
                }
            })
            .catch(error => {
                console.error(error);
            });
    }

    // Calculate and update total amount
    function updateTotalAmount(addShabekDue = false) {
        var totalAmount = 0;

        // Loop through the product table to sum up the total product prices
        $('#productTable tbody tr').each(function () {
            var rowTotal = parseFloat($(this).find('td:eq(4)').text()) || 0;
            totalAmount += rowTotal;
        });

        // Get the previous due (shabekDue)
        var previousDue = parseFloat($('#shabekDue').val()) || 0;

        // Add previous due to totalAmount if not already added or forcefully adding
        if (addShabekDue || !previousDueAdded) {
            totalAmount += previousDue;
            previousDueAdded = true; // Mark that previous due has been added
        }

        // Update total amounts in the form
        $('#shorboMotTaka').val(totalAmount.toFixed(2));
        $('#dueAmount').val(totalAmount.toFixed(2));

        // Update remaining due after subtracting the paid amount
        var paidAmount = parseFloat($('#paidAmount').val()) || 0;
        var remainingDue = totalAmount - paidAmount;
        $('#remainingDue').val(remainingDue.toFixed(2));

        // Update totalTotalPrice by adding only the total product prices (excluding previous due)
        totalTotalPrice = 0; // Reset totalTotalPrice before recalculating
        $('#productTable tbody tr').each(function () {
            var rowTotal = parseFloat($(this).find('td:eq(4)').text()) || 0;
            totalTotalPrice += rowTotal;
        });

        // Set totalTotalPrice only if it is greater than zero
        if (totalTotalPrice > 0) {
            $('#totalTotalPrice').val(totalTotalPrice.toFixed(2)); // Update totalTotalPrice field
        }
    }

    // Update total amount after adding a product
    $(document).on('click', '#addProductBtn', function () {
        var productName = $('#productSelect option:selected').text();
        var buyPrice = $('#buyPrice').val();
        var sellPrice = $('#sellPrice').val();
        var quantity = parseFloat($('#quantity').val());
        var stock = parseFloat($('#stock').val());
        var totalPrice = $('#totalPrice').val();

        if (quantity > stock) {
            alert("আপনি স্টকের থেকে বেশি পণ্য যোগ করতে পারবেন না।");
        } else if (quantity <= 0) {
            alert("পণ্যের পরিমাণ শূন্য বা তার চেয়ে কম হতে পারবে না।");
        } else {
            if (productName && buyPrice && sellPrice && quantity && totalPrice) {
                var newRow = `
                            <tr>
                                <td class="px-4 py-2">${productName}</td>
                                <td class="px-4 py-2">${buyPrice}</td>
                                <td class="px-4 py-2">${sellPrice}</td>
                                <td class="px-4 py-2">${quantity}</td>
                                <td class="px-4 py-2">${totalPrice}</td>
                                <td class="px-4 py-2">
                                    <button type="button" class="update-btn text-blue-500">আপডেট</button>
                                    <button type="button" class="delete-btn text-red-500">মুছে দিন</button>
                                </td>
                            </tr>`;
                $('#productTable tbody').append(newRow);

                var updatedStock = stock - quantity;
                $('#stock').val(updatedStock);

                clearProductFields(); // Clear input fields after adding

                // Recalculate total amount
                updateTotalAmount();
            } else {
                alert("অনুগ্রহ করে সব তথ্য পূরণ করুন!");
            }
        }
    });

    // Clear input fields for products
    function clearProductFields() {
        $('#productSelect').val('');
        $('#buyPrice').val('');
        $('#stock').val('');
        $('#quantity').val('');
        $('#sellPrice').val('');
        $('#totalPrice').val('');
    }

    // Remove product from the table
    $(document).on('click', '.delete-btn', function () {
        $(this).closest('tr').remove();
        updateTotalAmount(); // Update the total amount after deletion
    });

    // Update product fields in the form when clicking the "Update" button
    $(document).on('click', '.update-btn', function () {
        var row = $(this).closest('tr');
        var productName = row.find('td:eq(0)').text();
        var buyPrice = row.find('td:eq(1)').text();
        var sellPrice = row.find('td:eq(2)').text();
        var quantity = row.find('td:eq(3)').text();
        var totalPrice = row.find('td:eq(4)').text();

        $('#productSelect option').filter(function () {
            return $(this).text() === productName;
        }).prop('selected', true);
        $('#buyPrice').val(buyPrice);
        $('#sellPrice').val(sellPrice);
        $('#quantity').val(quantity);
        $('#totalPrice').val(totalPrice);

        row.remove();
        updateTotalAmount(); // Recalculate total amount
    });

    // Update remaining due when paid amount changes
    $(document).on('input', '#paidAmount', function () {
        updateTotalAmount();
    });

    // Function to handle button click
    document.getElementById('submitButton').addEventListener('click', function () {
        var depositAmount = parseFloat(document.getElementById('depositAmount').value) || 0;
        var dueAmount = parseFloat(document.getElementById('dueAmount').value) || 0;

        // Check if depositAmount is greater than dueAmount
        if (depositAmount > dueAmount) {
            alert("আপনার দেওয়া জমার পরিমাণ বকেয়ার চেয়ে বেশি হতে পারবে না!");
        } else {
            // Update dueAmount
            var newDueAmount = dueAmount - depositAmount;
            document.getElementById('dueAmount').value = newDueAmount.toFixed(2);
        }
    });



</script>













